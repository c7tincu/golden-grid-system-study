
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

@col: 100% / 16;



// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

.gg {
  float: left;
  overflow: hidden;
  .mx-box-sizing(border-box);
  .mx-transition(width cubic-bezier(0.382, 0, 0.618, 1) 0.309s);
}



// Grid layouts.
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// 16-column layout.
// ────────────────────────────────────────────────────────────────────────────

.mx-gg-16 (@index: 16) when (@index > 0) {
  @gg-16-col: e(%("%s%s", floor(@index / 10), mod(@index, 10)));

  .gg-@{gg-16-col},
  // Reset absolute fold rules.
  .gg-⊕.gg-@{gg-16-col}, .gg-⊖.gg-@{gg-16-col},
  // Reset relative fold rules.
  .gg-8-⊕.gg-@{gg-16-col}, .gg-8-⊖.gg-@{gg-16-col},
  .gg-4-⊕.gg-@{gg-16-col}, .gg-4-⊖.gg-@{gg-16-col},
  .gg-2-⊕.gg-@{gg-16-col}, .gg-2-⊖.gg-@{gg-16-col},
  .gg-1-⊕.gg-@{gg-16-col}, .gg-1-⊖.gg-@{gg-16-col} {
    width: (@col * @index);
  }

  .mx-gg-16(@index - 1);
}
.mx-gg-16 (0) {}

// Override rules.
.mx-gg-16-16 (@index: 16) when (@index > -1) {
  @gg-16-16-col: e(%("%s%s", floor(@index / 10), mod(@index, 10)));

  .gg-16-@{gg-16-16-col},
  // Reset absolute resets. ☺
  .gg-⊕.gg-16-@{gg-16-16-col}, .gg-⊖.gg-16-@{gg-16-16-col},
  // Reset relative resets. ☺
  .gg-8-⊕.gg-16-@{gg-16-16-col}, .gg-8-⊖.gg-16-@{gg-16-16-col},
  .gg-4-⊕.gg-16-@{gg-16-16-col}, .gg-4-⊖.gg-16-@{gg-16-16-col},
  .gg-2-⊕.gg-16-@{gg-16-16-col}, .gg-2-⊖.gg-16-@{gg-16-16-col},
  .gg-1-⊕.gg-16-@{gg-16-16-col}, .gg-1-⊖.gg-16-@{gg-16-16-col} {
    width: (@col * @index);
  }

  .mx-gg-16-16(@index - 1);
}
.mx-gg-16-16 (-1) {}

// 8-column layout.
// ────────────────────────────────────────────────────────────────────────────

.mx-gg-8 (@index: 8) when (@index > 0) {
  @gg-8-col: e(%("%s%s", floor(@index * 2 / 10), mod(@index * 2, 10)));
  @gg-8-lt: e(%("%s%s", floor((@index * 2 - 1) / 10), mod((@index * 2 - 1), 10)));

  .gg-@{gg-8-col},
  // Reset absolute fold rules.
  .gg-⊕.gg-@{gg-8-col}, .gg-⊖.gg-@{gg-8-col},
  // Reset relative fold rules.
  .gg-8-⊕.gg-@{gg-8-col}, .gg-8-⊖.gg-@{gg-8-col},
  .gg-4-⊕.gg-@{gg-8-col}, .gg-4-⊖.gg-@{gg-8-col},
  .gg-2-⊕.gg-@{gg-8-col}, .gg-2-⊖.gg-@{gg-8-col},
  .gg-1-⊕.gg-@{gg-8-col}, .gg-1-⊖.gg-@{gg-8-col}, {
    width: (@col * 2 * @index);
  }

  // Absolute fold rules.
  // Expand (make wider).
  .gg-⊕.gg-@{gg-8-lt} {
    width: (@col * 2 * @index);
  }
  // Collapse (make narrower).
  .gg-⊖.gg-@{gg-8-lt} {
    width: (@col * 2 * (@index - 1));
  }

  // Relative fold rules.
  // Expand (make wider).
  .gg-8-⊕.gg-@{gg-8-lt} {
    width: (@col * 2 * @index);
  }
  // Collapse (make narrower).
  .gg-8-⊖.gg-@{gg-8-lt} {
    width: (@col * 2 * (@index - 1));
  }

  .mx-gg-8(@index - 1);
}
.mx-gg-8 (0) {}

// Override rules.
.mx-gg-8-8 (@index: 8) when (@index > -1) {
  @gg-8-8-col: e(%("%s%s", floor(@index / 10), mod(@index, 10)));

  .gg-8-@{gg-8-8-col},
  // Reset absolute resets. ☺
  .gg-⊕.gg-8-@{gg-8-8-col}, .gg-⊖.gg-8-@{gg-8-8-col},
  // Reset relative resets. ☺
  .gg-8-⊕.gg-8-@{gg-8-8-col}, .gg-8-⊖.gg-8-@{gg-8-8-col},
  .gg-4-⊕.gg-8-@{gg-8-8-col}, .gg-4-⊖.gg-8-@{gg-8-8-col},
  .gg-2-⊕.gg-8-@{gg-8-8-col}, .gg-2-⊖.gg-8-@{gg-8-8-col},
  .gg-1-⊕.gg-8-@{gg-8-8-col}, .gg-1-⊖.gg-8-@{gg-8-8-col} {
    width: (@col * 2 * @index);
  }

  .mx-gg-8-8(@index - 1);
}
.mx-gg-8-8 (-1) {}

// 4-column layout.
// ────────────────────────────────────────────────────────────────────────────

.mx-gg-4 (@index: 4) when (@index > 0) {
  @gg-4-col: e(%("%s%s", floor(@index * 4 / 10), mod(@index * 4, 10)));

  .gg-@{gg-4-col},
  // Reset absolute fold rules.
  .gg-⊕.gg-@{gg-4-col}, .gg-⊖.gg-@{gg-4-col},
  // Reset relative fold rules.
  .gg-8-⊕.gg-@{gg-4-col}, .gg-8-⊖.gg-@{gg-4-col},
  .gg-4-⊕.gg-@{gg-4-col}, .gg-4-⊖.gg-@{gg-4-col},
  .gg-2-⊕.gg-@{gg-4-col}, .gg-2-⊖.gg-@{gg-4-col},
  .gg-1-⊕.gg-@{gg-4-col}, .gg-1-⊖.gg-@{gg-4-col} {
    width: (@col * 4 * @index);
  }

    .mx-gg-4-3 (@inner-index: 3) when (@inner-index > 0) {
    @gg-4-3-lt: e(%("%s%s", floor((@index * 4 - @inner-index) / 10), mod((@index * 4 - @inner-index), 10)));

    // Absolute fold rules.
    // Expand (make wider).
    .gg-⊕.gg-@{gg-4-3-lt} {
      width: (@col * 4 * @index);
    }
    // Collapse (make narrower).
    .gg-⊖.gg-@{gg-4-3-lt} {
      width: (@col * 4 * (@index - 1));
    }

    // Relative fold rules.
    // Expand (make wider).
    .gg-4-⊕.gg-@{gg-4-3-lt} {
      width: (@col * 4 * @index);
    }
    // Collapse (make narrower).
    .gg-4-⊖.gg-@{gg-4-3-lt} {
      width: (@col * 4 * (@index - 1));
    }

    .mx-gg-4-3(@inner-index - 1);
  }
  .mx-gg-4-3 (0) {}
  .mx-gg-4-3();

  .mx-gg-4(@index - 1);
}
.mx-gg-4 (0) {}

// Override rules.
.mx-gg-4-4 (@index: 4) when (@index > -1) {
  @gg-4-4-col: e(%("%s%s", floor(@index / 10), mod(@index, 10)));

  .gg-4-@{gg-4-4-col},
  // Reset absolute resets. ☺
  .gg-⊕.gg-4-@{gg-4-4-col}, .gg-⊖.gg-4-@{gg-4-4-col},
  // Reset relative resets. ☺
  .gg-8-⊕.gg-4-@{gg-4-4-col}, .gg-8-⊖.gg-4-@{gg-4-4-col},
  .gg-4-⊕.gg-4-@{gg-4-4-col}, .gg-4-⊖.gg-4-@{gg-4-4-col},
  .gg-2-⊕.gg-4-@{gg-4-4-col}, .gg-2-⊖.gg-4-@{gg-4-4-col},
  .gg-1-⊕.gg-4-@{gg-4-4-col}, .gg-1-⊖.gg-4-@{gg-4-4-col} {
    width: (@col * 4 * @index);
  }

  .mx-gg-4-4(@index - 1);
}
.mx-gg-4-4 (-1) {}

// 2-column layout.
// ────────────────────────────────────────────────────────────────────────────

.mx-gg-2 (@index: 2) when (@index > 0) {
  @gg-2-col: e(%("%s%s", floor(@index * 8 / 10), mod(@index * 8, 10)));

  .gg-@{gg-2-col},
  // Reset absolute fold rules.
  .gg-⊕.gg-@{gg-2-col}, .gg-⊖.gg-@{gg-2-col},
  // Reset relative fold rules.
  .gg-8-⊕.gg-@{gg-2-col}, .gg-8-⊖.gg-@{gg-2-col},
  .gg-4-⊕.gg-@{gg-2-col}, .gg-4-⊖.gg-@{gg-2-col},
  .gg-2-⊕.gg-@{gg-2-col}, .gg-2-⊖.gg-@{gg-2-col},
  .gg-1-⊕.gg-@{gg-2-col}, .gg-1-⊖.gg-@{gg-2-col} {
    width: (@col * 8 * @index);
  }

  .mx-gg-2-7 (@inner-index: 7) when (@inner-index > 0) {
    @gg-2-7-lt: e(%("%s%s", floor((@index * 8 - @inner-index) / 10), mod((@index * 8 - @inner-index), 10)));

    // Absolute fold rules.
    // Expand (make wider).
    .gg-⊕.gg-@{gg-2-7-lt} {
      width: (@col * 8 * @index);
    }
    // Collapse (make narrower).
    .gg-⊖.gg-@{gg-2-7-lt} {
      width: (@col * 8 * (@index - 1));
    }

    // Relative fold rules.
    // Expand (make wider).
    .gg-2-⊕.gg-@{gg-2-7-lt} {
      width: (@col * 8 * @index);
    }
    // Collapse (make narrower).
    .gg-2-⊖.gg-@{gg-2-7-lt} {
      width: (@col * 8 * (@index - 1));
    }

    .mx-gg-2-7(@inner-index - 1);
  }
  .mx-gg-2-7 (0) {}
  .mx-gg-2-7();

  .mx-gg-2(@index - 1);
}
.mx-gg-2 (0) {}

// Override rules.
.mx-gg-2-2 (@index: 2) when (@index > -1) {
  @gg-2-2-col: e(%("%s%s", floor(@index / 10), mod(@index, 10)));

  .gg-2-@{gg-2-2-col},
  // Reset absolute resets. ☺
  .gg-⊕.gg-2-@{gg-2-2-col}, .gg-⊖.gg-2-@{gg-2-2-col},
  // Reset relative resets. ☺
  .gg-8-⊕.gg-2-@{gg-2-2-col}, .gg-8-⊖.gg-2-@{gg-2-2-col},
  .gg-4-⊕.gg-2-@{gg-2-2-col}, .gg-4-⊖.gg-2-@{gg-2-2-col},
  .gg-2-⊕.gg-2-@{gg-2-2-col}, .gg-2-⊖.gg-2-@{gg-2-2-col},
  .gg-1-⊕.gg-2-@{gg-2-2-col}, .gg-1-⊖.gg-2-@{gg-2-2-col} {
    width: (@col * 8 * @index);
  }

  .mx-gg-2-2(@index - 1);
}
.mx-gg-2-2 (-1) {}

// 1-column layout.
// ────────────────────────────────────────────────────────────────────────────

.mx-gg-1 () {

  .gg-16,
  // Reset absolute fold rules.
  .gg-⊕.gg-16, .gg-⊖.gg-16,
  // Reset relative fold rules.
  .gg-8-⊕.gg-16, .gg-8-⊖.gg-16,
  .gg-4-⊕.gg-16, .gg-4-⊖.gg-16,
  .gg-2-⊕.gg-16, .gg-2-⊖.gg-16,
  .gg-1-⊕.gg-16, .gg-1-⊖.gg-16 {
    width: 100%;
  }

  // Expand (make wider).
  .mx-gg-1-15 (@inner-index: 15) when (@inner-index > 0) {
    @gg-1-15-lt: e(%("%s%s", floor((16 - @inner-index) / 10), mod((16 - @inner-index), 10)));

    // Absolute fold rules.
    // Expand (make wider).
    .gg-⊕.gg-@{gg-1-15-lt} {
      width: 100%;
    }
    // Collapse (make narrower).
    .gg-⊖.gg-@{gg-1-15-lt} {
      width: 0;
    }

    // Relative fold rules.
    // Expand (make wider).
    .gg-1-⊕.gg-@{gg-1-15-lt} {
      width: 100%;
    }
    // Collapse (make narrower).
    .gg-1-⊖.gg-@{gg-1-15-lt} {
      width: 0;
    }

    .mx-gg-1-15(@inner-index - 1);
  }
  .mx-gg-1-15 (0) {}
  .mx-gg-1-15();

}

// Override rules.
.mx-gg-1-1 (@index: 1) when (@index > -1) {
  @gg-1-1-col: e(%("%s%s", floor(@index / 10), mod(@index, 10)));

  .gg-1-@{gg-1-1-col},
  // Reset absolute resets. ☺
  .gg-⊕.gg-1-@{gg-1-1-col}, .gg-⊖.gg-1-@{gg-1-1-col},
  // Reset relative resets. ☺
  .gg-8-⊕.gg-1-@{gg-1-1-col}, .gg-8-⊖.gg-1-@{gg-1-1-col},
  .gg-4-⊕.gg-1-@{gg-1-1-col}, .gg-4-⊖.gg-1-@{gg-1-1-col},
  .gg-2-⊕.gg-1-@{gg-1-1-col}, .gg-2-⊖.gg-1-@{gg-1-1-col},
  .gg-1-⊕.gg-1-@{gg-1-1-col}, .gg-1-⊖.gg-1-@{gg-1-1-col} {
    width: (@col * 16 * @index);
  }

  .mx-gg-1-1(@index - 1);
}
.mx-gg-1-1 (-1) {}



// Grid media queries.
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

// 640px – 959px, the default.
.mx-gg-4();
.mx-gg-4-4();

// 1440px – ∞.
@media only screen and (min-width: 1440px) {
  .mx-gg-16();
  .mx-gg-16-16();
}

// 960px – 1439px.
@media only screen and (min-width: 960px) and (max-width: 1439px) {
  .mx-gg-8();
  .mx-gg-8-8();
}

// 480px – 639px.
@media only screen and (min-width: 480px) and (max-width: 639px) {
  .mx-gg-2();
  .mx-gg-2-2();
}

// body min-width (320px) – 479px.
@media only screen and (max-width: 479px) {
  .mx-gg-1();
  .mx-gg-1-1();
}



// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
